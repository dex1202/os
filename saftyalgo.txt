#include<stdio.h>
#include<stdlib.h>
int i,j,p,r;
int avail[20],need[20][20],alloc[20][20],max[20][20],work[10], finish[10], safe[10];
void accept();
void display();
void accept()
{
    printf("Enter number of processes:");
    scanf("%d",&p);
    printf("Enter number of resources:");
    scanf("%d",&r);
    printf("Enter allocation matrix:");
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            scanf("%d",&alloc[i][j]);
        }
    }
    printf("Enter the MAX matrix:");
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
        scanf("%d",&max[i][j]);
        }
    }
    printf("Enter available matrix:");
    for(i=0;i<r;i++)
    {
        scanf("%d",&avail[i]);
    }
}
void display()
{
    printf("\nAllocation matrix:\n");
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            printf("%d\t",alloc[i][j]);
        }
        printf("\n");
    }
    printf("\nMAX matrix:\n");
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            printf("%d\t",max[i][j]);
        }
        printf("\n");
    }
    printf("\nNeed Matrix:\n");
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
        {
            printf("%d\t",need[i][j]);
        }
        printf("\n");
    }
    printf("Available matrix:\n");
    for(i=0;i<r;i++)
    {
        printf("%d\t",avail[i]);
    }
}

int compare_need(int p){
    int i,j,flag = 0;
    for(j = 0; j < r; j++){
        if(need[p][j] > work[j]){
            flag = 1;
            break;
        }
    }
    if(flag == 0)
        return p;
    return -1;
}

void saftey_algo(){
    int over = 0, i, j, k, l = 0, flag, pno,finish[10]={0};
    for(i = 0; i < r; i++)
        work[i] = avail[i];
    while(!over){
        for(i = 0; i < p; i++){
            if(finish[i] == 0){
                flag = 0;
                pno = compare_need(i);
                if(pno > -1)
                    break;
            }
        }
        if(i == p){
            printf("System is unsafe");
            exit(1);
        }
        if(i < p && pno >= 0){
            for(k = 0; k < r; k++)
                work[k] += alloc[pno][k];
            finish[pno] = 1;
            safe[l++] = pno;
            if(l >= p){
                printf("\nSafe sequence is: ");
                for(l = 0; l < p; l++)
                    printf("P%d\t", safe[l]);
                over = 1;
            }
        }
    }
}

void request()
{
    int pid,newReq[3];
    printf("Enter process  id ->");
    scanf("%d",&pid);
    printf("Enter the resource A value->");
    scanf("%d",&newReq[0]);
    printf("Enter the resource B value->");
    scanf("%d",&newReq[1]);
    printf("Enter the resource C value->");
    scanf("%d",&newReq[2]);

    if(newReq[0]<=max[pid][0] && newReq[1]<=max[pid][1] && newReq[2]<=max[pid][2] && newReq[0] <= avail[0] && newReq[1] <= avail[1] && newReq[2] <= avail[2]){
        printf("process P%d can be executed with new resource request.\n",pid);
    }else{
        printf("process P%d can't be executed with new resource request.\n",pid);
    }
}

int main()
{
    accept();
    display();
    saftey_algo();
    request();
    
}
